import telebot
from telebot import types

import random
from datetime import datetime

from config import TOKEN, hi, currency, help_text
from extensions import Api



if __name__ == "__main__":
    bot = telebot.TeleBot(TOKEN)

    @bot.message_handler(commands=['start'])
    def welcome(message):
        # –í –∫–æ–º–º–∞–Ω–¥–µ /values –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –≤–∞–ª—é—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é.
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for i in currency:
            markup.add(types.KeyboardButton(i))

        bot.send_sticker(
            message.chat.id,
            open('AnimatedSticker.tgs', 'rb'))
        bot.send_message(
            message.chat.id,
            f'{random.choice(hi)} {message.from_user.first_name}. –Ø <strong>–ë–æ—Ç –ê–ª–µ–∫—Å–µ–π</strong>, —Å–æ–∑–¥–∞–Ω —á—Ç–æ –±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç.\n\n–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –º–µ–Ω—è–µ–º?',
            parse_mode='html', reply_markup=markup)
        print(f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")


    @bot.message_handler(content_types=['text'])
    def currency_first(message):
        print(f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –Ω–∞ 1-–æ–º —ç—Ç–∞–ø–µ.")
        try:
            if message.chat.type == 'private':

                if message.text in currency[:-1]:
                    next_currency = currency.copy()
                    next_currency.pop(currency.index(message.text))

                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for i in next_currency:
                        markup.add(types.KeyboardButton(i))

                    first_curr = message.text[:3]

                    text = "–ù–∞ —á—Ç–æ –º–µ–Ω—è–µ–º "+first_curr+"?"
                    bot.send_message(message.chat.id, text, reply_markup=markup)

                    bot.register_next_step_handler(message, currency_last, first_curr)


                elif message.text.lower().strip() == 'help':
                    print(
                        f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≤–≤–µ–ª help –Ω–∞ 1-–æ–º —É—Ä–æ–≤–Ω–µ.")
                    bot.send_message(message.chat.id, help_text, parse_mode='html')
                    bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ 1 –æ–º —ç—Ç–∞–ø–µ. –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å.")
                else:
                    print(
                        f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ 1-–µ–º —É—Ä–æ–≤–Ω–µ.")
                    bot.send_message(message.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "help" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "help" –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –º–µ–Ω—é')
                    bot.register_next_step_handler(message, currency_first)
        except Exception as ex:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –Ω–∞ 1-–æ–º —É—Ä–æ–≤–Ω–µ:\n{str(ex)}...\n\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "help" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "help" ')
            bot.register_next_step_handler(message, currency_first)

    def currency_last(message, first_curr):
        try:
            print(f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –Ω–∞ 2-–æ–º —É—Ä–æ–≤–Ω–µ.")
            if message.text in currency[:-1]:
                last_curr = message.text[:3]

                markup = types.ReplyKeyboardRemove(selective=True)

                text = "–ú–µ–Ω—è–µ–º "+first_curr+" –Ω–∞ "+last_curr
                bot.send_message(message.chat.id, text, reply_markup=markup)
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "+first_curr)

                bot.register_next_step_handler(message, currency_count, first_curr, last_curr)
            elif message.text.lower().strip() == 'help':
                print(
                    f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≤–≤–µ–ª help –Ω–∞ 2-–æ–º —É—Ä–æ–≤–Ω–µ.")
                bot.send_message(message.chat.id, help_text, parse_mode='html')
                bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ 2 –æ–º —ç—Ç–∞–ø–µ. –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É <strong>–Ω–∞</strong> –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å.", parse_mode='html')
                bot.register_next_step_handler(message, currency_last, first_curr)
            else:
                print(
                    f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ 2-–µ–º —É—Ä–æ–≤–Ω–µ.")
                bot.send_message(message.chat.id,
                                 '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "help" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "help" –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –º–µ–Ω—é')
                bot.register_next_step_handler(message, currency_last, first_curr)
        except Exception as ex:
            print(
                f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –û—à–∏–±–∫–∞ –Ω–∞ 2-–µ–º —É—Ä–æ–≤–Ω–µ.")
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –Ω–∞ 2-–æ–º —É—Ä–æ–≤–Ω–µ:\n{str(ex)}...\n\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "help" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "help" ')
            bot.register_next_step_handler(message, currency_last, first_curr)


    def currency_count(message, first_curr, last_curr):
        try:
            print(f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –Ω–∞ 3-–µ–º —É—Ä–æ–≤–Ω–µ.")
            if message.text.lower().strip() == 'help':
                print(
                    f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –≤–≤–µ–ª help –Ω–∞ 3-–µ–º —É—Ä–æ–≤–Ω–µ.")
                bot.send_message(message.chat.id, help_text, parse_mode='html')
                bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ 3-–µ–º —ç—Ç–∞–ø–µ. –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å.")
                bot.register_next_step_handler(message, currency_count, first_curr, last_curr)
            else:
                count = float(message.text)

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

                for i in currency:
                    markup.add(types.KeyboardButton(i))

                api = Api()
                price = api.get_price(first_curr, last_curr, count)
                bot.send_message(message.chat.id, f'{count} {first_curr} —Ä–∞–≤–Ω—ã {price} {last_curr}')

                bot.send_message(message.chat.id, "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ—â–µ üòä", reply_markup=markup)
                print(
                    f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –£—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.")
                print(f"\t{message.from_user.first_name} —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª {count} {first_curr} –≤ {price} {last_curr}")
        except Exception as ex:
            print(
                f"{datetime.now().strftime('%d.%m.%Y %H:%M')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –û—à–∏–±–∫–∞ –Ω–∞ 3-–µ–º —É—Ä–æ–≤–Ω–µ.")
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –Ω–∞ 3-–µ–º —É—Ä–æ–≤–Ω–µ:\n{str(ex)}.\n\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ –∏–ª–∏ "help" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏')
            bot.register_next_step_handler(message, currency_count, first_curr, last_curr)

    bot.polling(none_stop=True)

